Mondodb Assignment


1)Query to display all the documents in collection-
db.restaurent.find()

2)Query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection-
db.restaurent.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0})

3)Query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection-
db.restaurent.find({},{"restaurant_id":1,"name":1,"borough":1,"address.zipcode":1,"_id":0});


4)Query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection-
db.restaurent.find({},{"borough":"Bronx"});

5)Query to display all the restaurant which is in the borough Bronx-
db.restaurent.find({},{"borough":"Bronx"});

6)Query to display the first 5 restaurant which is in the borough Bronx-
db.restaurent.find({},{"borough":"Bronx"}).limit(5);

7)Query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx-
db.restaurent.find({},{"borough":"Bronx"}).limit(5);

8)Query to find the restaurants which achieved a score more than 90-
db.restaurent.find({grades:{$elemMatch: {"score": {$gt: 90}}}});

9)Query to find the restaurants that achieved a score, more than 80 but less than 100-
db.restaurent.find({grades:{$elemMatch: {"score": {$gt: 90,$lt: 100}}}});

10)Query to find the restaurants which locate in latitude value less than -95.754168-
 db.restaurants.find({"address.coord.0": {$lt:-95.754168}})

11)Query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168-
db.restaurent.find({"cuisine":{$ne: 'American'},"grades.score":{$gt: 70},"address.coord":{$lt: -65.754168}});

12)Query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168-
db.restaurent.find( {"cuisine" : {$ne : "American "},"grades.score" :{$gt: 70},"address.coord" : {$lt : -65.754168}});

13)Query to find the restaurants which do not prepare any cuisine of 'American' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order-
db.restaurants.find({ $and: [ {"cuisine" : {$ne : "American"} }, { "grades.grade" :"A" },{"borough": {$ne : "Brooklyn"}} ] }).sort({"cuisine":-1});


14)Query to find the restaurant_id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name-
db.restaurent.find({name: /^Wil/},{restaurent_id:1,name:1,borough:1,cuisine:1});

15)Query to find the restaurant_id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name-
db.restaurent.find({name: /ces$/},{restaurent_id:1,name:1,borough:1,cuisine:1});

16)Query to find the restaurant_id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
db.restaurent.find({name: /.*Reg.*/},{restaurent_id:1,name:1,borough:1,cuisine:1});


17)Query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish-
db.restaurent.find({"borough": "Bronx" ,$or : [{cuisine: "American "},{cuisine: "Chinese"}]});


18)Query to find the restaurant_id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn -
db.restaurent.find({$or: [{borough: "Staten Island"},{borough: "Staten Island"},{borough: "Queens"}]},{restaurant_id:1,cuisine:1,borough:1,cuisine:1,name:1});
OR 
db.restaurent.find( {borough: {$in: ["Staten Island","Queens"]}} ,{restaurant_id:1,cuisine:1,borough:1,cuisine:1})

19)Query to find the restaurant_id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn-
db.restaurent.find( {borough: {$nin: ["Staten Island","Queens"]}} ,{restaurant_id:1,cuisine:1,borough:1,cuisine:1})

20)Query to find the restaurant_id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10-
db.restaurent.find({"grades.score":{ $not: {$gt:10}}},{restaurant_id:1,cuisine:1,borough:1,cuisine:1});

21)Query to find the restaurant_id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'-
db.restaurent.find({$or: [{cuisine: {$nin:["American ","Chinese"]}},{name: /^Wil/}]},{restaurant_id:1,cuisine:1,borough:1,cuisine:1,name:1});

22)Query to find the restaurant_id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates-
db.restaurent.find({"grades.date": ISODate("2014-08-11T00:00:00Z"),"grades.grade": 'A'});

23)Query to find the restaurant_id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z"-
db.restaurent.find({"grades.1.date": ISODate("2014-08-11T00:00:00Z"),"grades.1.grade": 'A',"grades.1.score":9},{restaurant_id:1,cuisine:1,borough:1,cuisine:1,name:1}).count(););

24)Query to find the restaurant_id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52-
db.restaurent.find({"address.coord.1": {$gt: 42,$lte: 52}},{"restaurant_id" : 1,"name":1,"address":1,"coord":1});


25)Query to arrange the name of the restaurants in ascending order along with all the columns-
db.restaurent.find().sort({name: 1});

26)Query to arrange the name of the restaurants in descending along with all the columns-
db.restaurants.find().sort({name:-1})

27)Query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order-
db.restaurent.find().sort({cuisine: 1,borough: -1});

28)Query to know whether all the addresses contains the street or not-
db.restaurent.find({"address.street":{$exists: true}});

29)Query which will select all documents in the restaurants collection where the coord field value is Double-
db.restaurent.find({"address.coord":{$type: 1}});

30)Query which will select the restaurant_id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7-
db.restaurent.find({"grades.score":{$mod : [7,0]}});

31)Query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name-
db.restaurent.find({"name": /mon.*/},{"address.coord":1,name: 1,borough:1,cuisine:1});

32)Query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name-
db.restaurent.find({"name": /^Mad.*/},{"address.coord":1,name: 1,borough:1,cuisine:1});

